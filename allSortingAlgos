#include<bits/stdc++.h>
using namespace std;
//by aman_aot
//simple sorting
vector<int> sort(vector<int> arr,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(arr[j]>arr[i])
            {
                swap(arr[i],arr[j]);
            }
        }
    }
    return arr;
}
//selection sort
vector<int> selectionSort(vector<int> arr,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
            if(arr[j]<arr[i])
            {
                swap(arr[i],arr[j]);
            }
        }
    }
    return arr;
}
//bubblesort
vector<int> bubbleSort(vector<int> arr,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(arr[j+1],arr[j]);
            }
        }
    }
    return arr;
}
//merge function of merge-sorting
void merge(vector<int> arr,int l,int mid,int r)
{
    int n1=mid-l+1;
    int n2=r-mid;
    vector<int> arr1(n1),arr2(n2);
    for(int i=0;i<n1;i++)
    {
        arr1[i]=arr[l+i];
    }
    for(int i=0;i<n2;i++)
    {
        arr2[i]=arr[mid+1+i];
    }
    int i=0,j=0,k=l;
    while(i<n1&&j<n2)
    {
        if(arr1[i]>arr2[j])
        {
            arr[k]=arr2[j];
            j++;
            k++;
        }
        else
        {
            arr[k]=arr1[i];
            i++;
            k++;
        }
        while(i<n1)
        {
            arr[k]=arr1[i];
            k++,i++;
        }
        while(i<n2)
        {
            arr[k]=arr2[j];
            j++;k++;
        }
    }
    
}
//mergesort
void mergeSort(vector<int> arr,int l,int r)
{
    if(l<r)
    {
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr, l, mid, r);
        
    }
}
//quicksort
int partition(vector<int> array, int low, int high) {
    
  // select the rightmost element as pivot
  int pivot = array[high];
  
  // pointer for greater element
  int i = (low - 1);

  // traverse each element of the array
  // compare them with the pivot
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
        
      // if element smaller than pivot is found
      // swap it with the greater element pointed by i
      i++;
      
      // swap element at i with element at j
      swap(array[i], array[j]);
    }
  }
  
  // swap pivot with the greater element at i
  swap(array[i + 1], array[high]);
  
  // return the partition point
  return (i + 1);
}

void quickSort(vector<int> array, int low, int high) {
  if (low < high) {
      
    // find the pivot element such that
    // elements smaller than pivot are on left of pivot
    // elements greater than pivot are on righ of pivot
    int pi = partition(array, low, high);

    // recursive call on the left of pivot
    quickSort(array, low, pi - 1);

    // recursive call on the right of pivot
    quickSort(array, pi + 1, high);
  }
}
int main()
{
    vector<int> arr={1,3,7,6,9,8};
    vector<int> res=sort(arr,6);
    for(int i=0;i<6;i++)
    {
        cout<<res[i];
    }
    cout<<endl;
    vector<int> res1=selectionSort(arr,6);
    for(int i=0;i<6;i++)
    {
        cout<<res1[i];
    }
    cout<<endl;
    vector<int> res2=bubbleSort(arr,6);
    for(int i=0;i<6;i++)
    {
        cout<<res2[i];
    }
    cout<<endl;
    mergeSort(arr,0,6);
    for(int i=0;i<6;i++)
    {
        cout<<arr[i];
    }
    cout<<endl;
    vector<int> arr1={1,3,7,6,9,8};
    quickSort(arr,0,6);
    for(int i=0;i<6;i++)
    {
        cout<<arr1[i];
    }
    
}
